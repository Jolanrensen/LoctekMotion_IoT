substitutions:
  device_name: HS01B-1 Upsy Desky
  name: hs01b-1_upsy_desky

  # Defaults
  standing_desk_min_height: "62.0" # Min height (original one)
  standing_desk_max_height: "98.5" # Max height
  desk_height_name: "Desk Height"
  target_desk_height_name: "Target Desk Height"
  standing_desk_height_units: "cm"

esphome:
  name: ${name}
  comment: ${device_name}
  platform: esp32
  board: esp32dev
  includes:
    - desk_height_sensor.h
    - desk_keypad.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: upsy-desky
    password: !secret ap_fallback_password

captive_portal:

web_server:
  port: 80


# Enable logging
logger:
  level: DEBUG
  baud_rate: 0 # 460800

# Enable Home Assistant API
api:
  password: !secret ha_api_password

ota:
  password: !secret ha_api_password

script:
  - id: screen_timer
    mode: restart
    then:
      # on_start
      - logger.log: "Executing screen timer command"
      - switch.turn_on: virtual_screen
      - delay: 12s  # timer length (keypad screen timeout is 10s + 2s buffer)
      - if:
          condition:
            binary_sensor.is_off: screen
          then:
            - switch.turn_off: virtual_screen
      # on_end

  - id: script_start_command
    mode: restart
    then:
      - logger.log: "Executing Empty command"
      - if:
          condition:
            switch.is_off: virtual_screen
          then:
            - script.execute: screen_timer
            - delay: 1s
          else:
            - script.execute: screen_timer

uart:
  - id: desk_uart
    baud_rate: 9600
    tx_pin: GPIO16
    rx_pin: GPIO17
    debug:
      direction: BOTH
      dummy_receiver: false
      after:
        delimiter: "\n"
      sequence:
        - lambda: UARTDebug::log_string(direction, bytes);

  - id: keypad_uart
    baud_rate: 9600
    tx_pin: GPIO1 # TODO unused?
    rx_pin: GPIO19

number:
  - platform: template
    name: "${device_name} Min Target Height"
    entity_category: "config"
    min_value: 0
    max_value: 150
    step: 0.1
    optimistic: true
    restore_value: true
    initial_value: ${standing_desk_min_height}
    on_value:
      then:
        lambda: !lambda |-
          id(target_desk_height)->traits.set_min_value(x);

  - platform: template
    name: "${device_name} Max Target Height"
    entity_category: "config"
    min_value: 0
    max_value: 150
    step: 0.1
    optimistic: true
    restore_value: true
    initial_value: ${standing_desk_max_height}
    on_value:
      then:
        lambda: !lambda |-
          id(target_desk_height)->traits.set_max_value(x);

  - platform: template
    id: target_desk_height
    name: ${target_desk_height_name}
    unit_of_measurement: ${standing_desk_height_units}
    restore_value: true
    optimistic: true
    min_value: ${standing_desk_min_height}
    max_value: ${standing_desk_max_height}
    step: 0.1
    set_action:
      then:
#        - lambda: !lambda |-
#            float pos = (float(x) - float(${standing_desk_min_height})) / (float(${standing_desk_max_height}) - float(${standing_desk_min_height}));
#            if (abs(pos - id(desk).position) > 0.1) {
#              id(desk).make_call().set_position(pos).perform();
#            }
        - script.execute: script_start_command
        - script.wait: script_start_command
        - if:
            condition: # if desk height is higher than target
              lambda: !lambda |-
                return ((DeskHeightSensor*) id(desk_height))->get_last_read() > x;
                // return id(desk_height).state > x;
            then:
              - switch.turn_on: switch_down
              - wait_until:
                  condition:
                    lambda: !lambda |-
                      return ((DeskHeightSensor*) id(desk_height))->get_last_read() <= x || !id(switch_down).state;
                      // return id(desk_height).state <= x;
                  timeout: 20s
              - switch.turn_off: switch_down
#              - while:
#                  condition: # while desk height is higher than target
#                    and:
#                      - switch.is_on: desk_is_moving
#                      - lambda: !lambda |-
#                          return ((DeskHeightSensor*) id(desk_height))->get_last_read() >= x;
#                  then:
#                    - uart.write:
#                        id: desk_uart # move down
#                        data: [ 0x9b, 0x06, 0x02, 0x02, 0x00, 0x0c, 0xa0, 0x9d ]
#                    - delay: 0ms
            else:
              - switch.turn_on: switch_up
              - wait_until:
                  condition:
                    lambda: !lambda |-
                      return ((DeskHeightSensor*) id(desk_height))->get_last_read() >= x || !id(switch_up).state;
                      // return id(desk_height).state >= x;
                  timeout: 20s
              - switch.turn_off: switch_up
#              - while:
#                  condition: # while desk height is lower than target
#                    and:
#                      - switch.is_on: desk_is_moving
#                      - lambda: !lambda |-
#                          return ((DeskHeightSensor*) id(desk_height))->get_last_read() <= x;
#                  then:
#                    - uart.write:
#                        id: desk_uart # move up
#                        data: [ 0x9b, 0x06, 0x02, 0x01, 0x00, 0xfc, 0xa0, 0x9d ]
#                    - delay: 0ms
#        - switch.turn_off: desk_is_moving

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: Uptime

  - platform: custom
    lambda: !lambda |-
      auto desk_height_sensor = new DeskHeightSensor(id(desk_uart));
      App.register_component(desk_height_sensor);
      return {desk_height_sensor};
    sensors:
      id: "desk_height"
      name: Desk Height
      unit_of_measurement: ${standing_desk_height_units}
      accuracy_decimals: 1
      icon: "mdi:counter"
      on_value:
        then:
          - script.execute: screen_timer
          - cover.template.publish:
              id: desk
              position: !lambda |-
                // The sensor outputs values from standing_desk_min_height (cm) to standing_desk_max_height (cm)
                // We need to translate this to 0 - 1 scale.
                float position = (float(x) - float(${standing_desk_min_height})) / (float(${standing_desk_max_height}) - float(${standing_desk_min_height}));
                return position;

  - platform: custom
    lambda: |-
      auto desk_keypad_sensor = new DeskKeypad(id(keypad_uart));
      App.register_component(desk_keypad_sensor);
      return {desk_keypad_sensor};
    sensors:
      id: "desk_command"
      name: Desk command
      icon: "mdi:counter"
      on_value:
        then:
          lambda: |-
            if(!id(keypad_switch).state)
            {
              if(id(desk_command).state == 1)
              {
                id(desk).make_call().set_command_open().perform();
              } else if(id(desk_command).state == 2)
              {
                id(desk).make_call().set_command_close().perform();
              } else if(id(desk_command).state == 3)
              {
                id(switch_preset1).turn_on();
              } else if(id(desk_command).state == 4)
              {
                id(switch_preset2).turn_on();
              } else if(id(desk_command).state == 5)
              {
                id(switch_preset3).turn_on();
              }  else if(id(desk_command).state == 6)
              {
                id(switch_m).turn_on();
              } else if(id(desk_command).state == 7)
              {
                id(switch_alarm).turn_on();
              } else if(id(desk_command).state == 8)
              {
                id(desk).make_call().set_command_stop().perform();
              }
            }

binary_sensor:
  - platform: gpio
    name: "Screen (pin 20)"
    id: "screen"
    pin: GPIO21
    internal: false
    on_press:
      then:
        - switch.turn_on: virtual_screen
    on_release:
      then:
        - switch.turn_off: virtual_screen

switch:
  - platform: template
    name: "Keypad locked"
    icon: mdi:key
    id: "keypad_switch"
    internal: false
    restore_state: true
    assumed_state: false
    optimistic: true

  - platform: template
    name: "Preset 1"
    id: switch_preset1
    icon: mdi:numeric-1-box
    turn_on_action:
      - logger.log: "Executing Preset 1 command"
      - script.execute: script_start_command
      - script.wait: script_start_command
      - uart.write:
          id: desk_uart
          data: [ 0x9b, 0x06, 0x02, 0x04, 0x00, 0xac, 0xa3, 0x9d ]
    internal: false

  - platform: template
    name: "Preset 2"
    id: switch_preset2
    icon: mdi:numeric-2-box
    turn_on_action:
      - logger.log: "Executing Preset 2 command"
      - script.execute: script_start_command
      - script.wait: script_start_command
      - uart.write:
          id: desk_uart
          data: [ 0x9b, 0x06, 0x02, 0x08, 0x00, 0xac, 0xa6, 0x9d ]
    internal: false

  - platform: template
    name: "Preset 3"
    id: switch_preset3
    icon: mdi:numeric-3-box
    turn_on_action:
      - logger.log: "Executing Preset 3 command"
      - script.execute: script_start_command
      - script.wait: script_start_command
      - uart.write:
          id: desk_uart
          data: [ 0x9b, 0x06, 0x02, 0x10, 0x00, 0xac, 0xac, 0x9d ]
    internal: false

  - platform: template
    name: "M"
    id: switch_m
    icon: mdi:alpha-m-circle
    turn_on_action:
      - logger.log: "Executing Preset 3 command"
      - script.execute: script_start_command
      - script.wait: script_start_command
      - uart.write:
          id: desk_uart
          data: [ 0x9b, 0x06, 0x02, 0x20, 0x00, 0xac, 0xb8, 0x9d ]
    internal: false

  - platform: template
    name: "Alarm"
    id: switch_alarm
    icon: mdi:alpha-m-circle
    turn_on_action:
      - logger.log: "Executing Alarm command"
    #  - script.execute: script_start_command
    #  - script.wait: script_start_command
    #  - uart.write:
    #      id: desk_uart
    #      data: [0x9b, 0x06, 0x02, 0x40, 0x00, 0xac, 0x90, 0x9d]
    internal: false

  - platform: gpio
    name: "Virtual Screen for desk (pin 20)"
    id: "virtual_screen"
    pin:
      number: GPIO22
      mode: OUTPUT
    restore_mode: ALWAYS_OFF
    internal: false

  - platform: template
    name: internal_up
    id: internal_up
    internal: true
    restore_state: false
    assumed_state: false
    optimistic: true

  - platform: template
    name: "Up"
    id: switch_up
    icon: mdi:arrow-up-bold
    internal: false
    restore_state: false
    assumed_state: false
    optimistic: true
    turn_off_action:
      - switch.turn_off: internal_up
      - cover.template.publish:
          id: desk
          current_operation: IDLE
    turn_on_action:
      - switch.turn_off: switch_down
      - cover.template.publish:
          id: desk
          current_operation: OPENING
      - switch.turn_on: internal_up
      - while:
          condition:
            and:
              - lambda: !lambda "return id(desk_height).state < ${standing_desk_max_height} - 0.1;"
              - switch.is_on: internal_up # cannot reference self. Will report off
          then:
            - uart.write:
                id: desk_uart # move up
                data: [ 0x9b, 0x06, 0x02, 0x01, 0x00, 0xfc, 0xa0, 0x9d ]
            - delay: 0ms
      - switch.turn_off: switch_up

  - platform: template
    name: internal_down
    id: internal_down
    internal: true
    restore_state: false
    assumed_state: false
    optimistic: true

  - platform: template
    name: "Down"
    id: switch_down
    icon: mdi:arrow-down-bold
    internal: false
    restore_state: false
    assumed_state: false
    optimistic: true
    turn_off_action:
      - switch.turn_off: internal_down
      - cover.template.publish:
          id: desk
          current_operation: IDLE
    turn_on_action:
      - switch.turn_off: switch_up
      - cover.template.publish:
          id: desk
          current_operation: CLOSING
      - switch.turn_on: internal_down
      - while:
          condition:
            and:
              - lambda: !lambda "return id(desk_height).state > ${standing_desk_min_height} + 0.1;"
              - switch.is_on: internal_down # cannot reference self. Will report off
          then:
            - uart.write:
                id: desk_uart # move down
                data: [ 0x9b, 0x06, 0x02, 0x02, 0x00, 0x0c, 0xa0, 0x9d ]
            - delay: 0ms
      - switch.turn_off: switch_down

  - platform: uart
    name: "Empty command"
    id: switch_empty
    data: [ 0x9b, 0x06, 0x02, 0x00, 0x00, 0x6c, 0xa1, 0x9d ]
    uart_id: desk_uart
    internal: false

cover:
  - platform: template
    name: "Desk"
    id: "desk"
    assumed_state: true
    has_position: true
    position_action:
     - number.set:
         id: target_desk_height
         value: !lambda |-
           return float(${standing_desk_min_height}) + float(pos) * (float(${standing_desk_max_height}) - float(${standing_desk_min_height}));

    # Move desk up
    open_action:
      - script.execute: script_start_command
      - script.wait: script_start_command
      - logger.log: "Executing up command"
      - switch.turn_on: switch_up

    stop_action:
      - switch.turn_off: switch_up
      - switch.turn_off: switch_down

    # Move desk down
    close_action:
      - script.execute: script_start_command
      - script.wait: script_start_command
      - logger.log: "Executing down command"
      - switch.turn_on: switch_down

    optimistic: true
